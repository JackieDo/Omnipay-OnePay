<?php namespace Omnipay\OnePay\Message;

use Omnipay\Common\Message\AbstractRequest as BaseAbstractRequest;
use Omnipay\Validator\Traits\ValidatorTrait;
use Omnipay\OnePay\Traits\HasCheckSumTrait;
use Omnipay\OnePay\Traits\ParamsAccessorMutatorTrait;

/**
 * OnePay Abstract Request
 */
abstract class AbstractRequest extends BaseAbstractRequest
{
    use HasCheckSumTrait, ParamsAccessorMutatorTrait, ValidatorTrait;

    /**
     * API version
     */
    const API_VERSION = '2';

    /**
     * Endpoint URL in production
     *
     * @var string
     */
    protected $liveEndpoint = 'https://onepay.vn/onecomm-pay/vpc.op';

    /**
     * Endpoint URL in test mode
     *
     * @var string
     */
    protected $testEndpoint = 'https://mtf.onepay.vn/onecomm-pay/vpc.op';

    /**
     * Get list of parameters to be converted.
     *
     * @return array
     */
    public function getParametricConverter()
    {
        return [
            'merchant'    => 'vpc_Merchant',
            'accessCode'  => 'vpc_AccessCode',
            'orderInfo'   => 'vpc_OrderInfo',
            'amount'      => 'vpc_Amount',
            'returnUrl'   => 'vpc_ReturnURL',
            'currency'    => 'vpc_Currency',
            'merchTxnRef' => 'vpc_MerchTxnRef',
            'locale'      => 'vpc_Locale',
            'user'        => 'vpc_User',
            'password'    => 'vpc_Password',
            'againLink'   => 'AgainLink',
            'title'       => 'Title'
        ];
    }

    /**
     * Get amount based on OnePay format rule
     *
     * @return string
     */
    public function getFormatedAmount()
    {
        return $this->getAmount() * 100;
    }

    /**
     * Get the value of the merchTxnRef parameter
     *
     * @return string
     */
    public function getMerchTxnRef()
    {
        return $this->getParameter('merchTxnRef');
    }

    /**
     * Set the value of the merchTxnRef parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setMerchTxnRef($value)
    {
        return $this->setParameter('merchTxnRef', $value);
    }

    /**
     * Get the transaction ID.
     *
     * The transaction ID is the identifier generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->getMerchTxnRef();
    }

    /**
     * Sets the transaction ID.
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setTransactionId($value)
    {
        return $this->setMerchTxnRef($value);
    }

    /**
     * Get the value of the orderInfo parameter
     *
     * @return string
     */
    public function getOrderInfo()
    {
        return $this->getParameter('orderInfo');
    }

    /**
     * Set the value of the orderInfo parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setOrderInfo($value)
    {
        return $this->setParameter('orderInfo', $value);
    }

    /**
     * Get the request description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->getOrderInfo();
    }

    /**
     * Sets the request description.
     *
     * @param string $value
     * @return $this
     */
    public function setDescription($value)
    {
        return $this->setOrderInfo($value);
    }

    /**
     * Get the value of the againLink parameter
     *
     * @return string
     */
    public function getAgainLink()
    {
        return $this->getParameter('againLink');
    }

    /**
     * Set the value of the againLink parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setAgainLink($value)
    {
        return $this->getParameter('againLink', $value);
    }

    /**
     * Get the value of the title parameter
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->getParameter('title');
    }

    /**
     * Set the value of the title parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setTitle($value)
    {
        return $this->setParameter('title', $value);
    }

    /**
     * Get value of the locale parameter
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->getParameter('locale');
    }

    /**
     * Set value of the locale parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setLocale($value)
    {
        return $this->setParameter('locale', $value);
    }

    /**
     * Generate base data for sending to server
     *
     * @return array
     */
    protected function getBaseData()
    {
        $this->validateWithRules([
            'merchant'   => ['required' => true],
            'accessCode' => ['required' => true],
            'hashCode'   => ['required' => true],
        ]);

        return [
            'vpc_Merchant'   => $this->getMerchant(),
            'vpc_AccessCode' => $this->getAccessCode(),
        ];
    }

    /**
     * Determine URI endpoint of gateway
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->getTestMode() ? $this->testEndpoint : $this->liveEndpoint;
    }
}
